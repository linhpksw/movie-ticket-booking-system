@page "/SignUp"
@using G5_MovieTicketBookingSystem.DTOs.UserDto;
@using System.Diagnostics

<!-- ==========Preloader========== -->
<div class="preloader">
    <div class="preloader-inner">
        <div class="preloader-icon">
            <span></span>
            <span></span>
        </div>
    </div>
</div>
<!-- ==========Preloader========== -->
<!-- ==========Sign-In-Section========== -->
<section class="account-section bg_img" data-background="./assets/images/account/account-bg.jpg">
    <div class="container">
        <div class="padding-top padding-bottom">
            <div class="account-area">
                <div class="section-header-3">
                    <span class="cate">welcome</span>
                    <h2 class="title">to Boleto </h2>
                </div>
                <form method="post" @onsubmit="@Submit" class="account-form" @formname="Sign-Up">
                    <AntiforgeryToken/>

                    <div class="form-group">
                        <label for="email1">Email<span>*</span></label>
                        <InputText type="text" placeholder="Enter Your Email" @bind-Value="Model.Email" id="email1" required />

                        @if (Error.ContainsKey("Email"))
                        {
                            <p>@Error["Email"] </p>
                        }
                    </div>
                    <div class="form-group">
                        <label for="pass1">Password<span>*</span></label>
                        <InputText type="password" placeholder="Password" @bind-Value="Model.Password" id="pass1" required/>
                    </div>
                    <div class="form-group">
                        <label for="pass2">Confirm Password<span>*</span></label>
                        <InputText type="password" placeholder="Password" @bind-Value="Model.PasswordConfirm" id="pass2" required/>
                        @if (Error.ContainsKey("Password"))
                        {
                            <p>@Error["Password"] </p>
                        }
                    </div>
                    <div class="form-group checkgroup">
                        <InputCheckbox id="bal" @bind-Value="isCheck" required />
                        <label for="bal">I agree to the <a href="#0">Terms, Privacy Policy</a> and <a href="#0">Fees</a></label>
                    </div>
                    <div class="form-group text-center">
                        <input type="submit" value="Sign Up">
                    </div>
                </form>
                <div class="option">
                    Already have an account? <a href="/Login">Login</a>
                </div>
                <div class="or"><span>Or</span></div>
                <ul class="social-icons">
                    <li>
                        <a href="#0">
                            <i class="fab fa-facebook-f"></i>
                        </a>
                    </li>
                    <li>
                        <a href="#0" class="active">
                            <i class="fab fa-twitter"></i>
                        </a>
                    </li>
                    <li>
                        <a href="#0">
                            <i class="fab fa-google"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>
@code {
    [SupplyParameterFromForm]
    private UseCreateDto Model { get; set; } = new UseCreateDto();
    private Dictionary<string, string> Error = new Dictionary<string, string>();
    private bool isCheck = false;

    protected override void OnInitialized() => Model ??= new();

    private async Task Submit()
    {
        Error.Clear();

        // Email validation
        if (string.IsNullOrEmpty(Model.Email))
        {
            Error.Add("Email", "Email is required");
        }
        else if (!Model.Email.Contains("@"))
        {
            Error.Add("Email", "Email must contain @ symbol");
        }

        // Password validation
        if (string.IsNullOrEmpty(Model.Password))
        {
            Error.Add("Password", "Password is required");
        }
        else if (Model.Password.Length < 8)
        {
            Error.Add("Password", "Password must be at least 8 characters");
        }
        else if (Model.Password != Model.PasswordConfirm)
        {
            Error.Add("Password", "Passwords do not match");
        }

        // Terms validation
        if (!isCheck)
        {
            Error.Add(" Agree", ""); // Empty string since we show custom message
            return;
        }

        if (Error.Count > 0)
        {
            return;
        }

        // Add your signup logic here
        // Example: await someService.RegisterUser(Model);
    }
}
